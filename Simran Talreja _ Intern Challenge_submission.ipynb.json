{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import library\n",
    "import pandas as pd\n",
    "from datetime import timedelta\n",
    "import seaborn as sns\n",
    "pip install xlrd==1.2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>746</td>\n",
       "      <td>224</td>\n",
       "      <td>2</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-13 12:36:56.190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>92</td>\n",
       "      <td>925</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-03 17:38:51.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>861</td>\n",
       "      <td>144</td>\n",
       "      <td>1</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-14 04:23:55.595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "      <td>935</td>\n",
       "      <td>156</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>2017-03-26 12:43:36.649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>883</td>\n",
       "      <td>156</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>2017-03-01 04:35:10.773</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  shop_id  user_id  order_amount  total_items payment_method  \\\n",
       "0         1       53      746           224            2           cash   \n",
       "1         2       92      925            90            1           cash   \n",
       "2         3       44      861           144            1           cash   \n",
       "3         4       18      935           156            1    credit_card   \n",
       "4         5       18      883           156            1    credit_card   \n",
       "\n",
       "               created_at  \n",
       "0 2017-03-13 12:36:56.190  \n",
       "1 2017-03-03 17:38:51.999  \n",
       "2 2017-03-14 04:23:55.595  \n",
       "3 2017-03-26 12:43:36.649  \n",
       "4 2017-03-01 04:35:10.773  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import the dataset\n",
    "df = pd.read_excel('2022 Winter Data Science Intern Challenge Data Set.xlsx')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3145.128"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculating Average Order Value\n",
    "df['order_amount'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>5000.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2500.500000</td>\n",
       "      <td>50.078800</td>\n",
       "      <td>849.092400</td>\n",
       "      <td>3145.128000</td>\n",
       "      <td>8.78720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1443.520003</td>\n",
       "      <td>29.006118</td>\n",
       "      <td>87.798982</td>\n",
       "      <td>41282.539349</td>\n",
       "      <td>116.32032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>607.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1250.750000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>775.000000</td>\n",
       "      <td>163.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2500.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>849.000000</td>\n",
       "      <td>284.000000</td>\n",
       "      <td>2.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3750.250000</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>925.000000</td>\n",
       "      <td>390.000000</td>\n",
       "      <td>3.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>704000.000000</td>\n",
       "      <td>2000.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          order_id      shop_id      user_id   order_amount  total_items\n",
       "count  5000.000000  5000.000000  5000.000000    5000.000000   5000.00000\n",
       "mean   2500.500000    50.078800   849.092400    3145.128000      8.78720\n",
       "std    1443.520003    29.006118    87.798982   41282.539349    116.32032\n",
       "min       1.000000     1.000000   607.000000      90.000000      1.00000\n",
       "25%    1250.750000    24.000000   775.000000     163.000000      1.00000\n",
       "50%    2500.500000    50.000000   849.000000     284.000000      2.00000\n",
       "75%    3750.250000    75.000000   925.000000     390.000000      3.00000\n",
       "max    5000.000000   100.000000   999.000000  704000.000000   2000.00000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking for Missing and Duplicate Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [order_id, shop_id, user_id, order_amount, total_items, payment_method, created_at]\n",
       "Index: []"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for missing values \n",
    "df[df.order_amount<=0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [order_id, shop_id, user_id, order_amount, total_items, payment_method, created_at]\n",
       "Index: []"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for duplicate values \n",
    "df[df.duplicated('order_id')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2047    1\n",
       "2608    1\n",
       "4647    1\n",
       "2600    1\n",
       "553     1\n",
       "       ..\n",
       "3263    1\n",
       "1218    1\n",
       "3267    1\n",
       "1222    1\n",
       "2049    1\n",
       "Name: order_id, Length: 5000, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check for duplicate values \n",
    "df.order_id.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hence no missing or duplicate values in the dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "start_date_for_AOV = df[\"created_at\"].min()+ timedelta(days=29)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>payment_method</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>created_at</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-03-01 00:08:09.179</th>\n",
       "      <td>1863</td>\n",
       "      <td>39</td>\n",
       "      <td>738</td>\n",
       "      <td>536</td>\n",
       "      <td>4</td>\n",
       "      <td>cash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 00:10:19.043</th>\n",
       "      <td>1742</td>\n",
       "      <td>39</td>\n",
       "      <td>910</td>\n",
       "      <td>268</td>\n",
       "      <td>2</td>\n",
       "      <td>cash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 00:14:12.250</th>\n",
       "      <td>3229</td>\n",
       "      <td>97</td>\n",
       "      <td>912</td>\n",
       "      <td>324</td>\n",
       "      <td>2</td>\n",
       "      <td>cash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 00:19:31.258</th>\n",
       "      <td>1268</td>\n",
       "      <td>80</td>\n",
       "      <td>798</td>\n",
       "      <td>290</td>\n",
       "      <td>2</td>\n",
       "      <td>credit_card</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 00:22:24.790</th>\n",
       "      <td>2690</td>\n",
       "      <td>49</td>\n",
       "      <td>799</td>\n",
       "      <td>258</td>\n",
       "      <td>2</td>\n",
       "      <td>credit_card</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         order_id  shop_id  user_id  order_amount  \\\n",
       "created_at                                                          \n",
       "2017-03-01 00:08:09.179      1863       39      738           536   \n",
       "2017-03-01 00:10:19.043      1742       39      910           268   \n",
       "2017-03-01 00:14:12.250      3229       97      912           324   \n",
       "2017-03-01 00:19:31.258      1268       80      798           290   \n",
       "2017-03-01 00:22:24.790      2690       49      799           258   \n",
       "\n",
       "                         total_items payment_method  \n",
       "created_at                                           \n",
       "2017-03-01 00:08:09.179            4           cash  \n",
       "2017-03-01 00:10:19.043            2           cash  \n",
       "2017-03-01 00:14:12.250            2           cash  \n",
       "2017-03-01 00:19:31.258            2    credit_card  \n",
       "2017-03-01 00:22:24.790            2    credit_card  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.set_index('created_at')\n",
    "df = df.sort_index()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "aov_df = df.rolling('30D').order_amount.mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>order_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4833</th>\n",
       "      <td>2017-03-30 00:22:19.920</td>\n",
       "      <td>3237.896359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4834</th>\n",
       "      <td>2017-03-30 00:36:01.921</td>\n",
       "      <td>3237.321613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4835</th>\n",
       "      <td>2017-03-30 00:42:12.094</td>\n",
       "      <td>3236.705955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4836</th>\n",
       "      <td>2017-03-30 00:54:43.962</td>\n",
       "      <td>3236.095514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4837</th>\n",
       "      <td>2017-03-30 00:57:20.356</td>\n",
       "      <td>3235.458247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>2017-03-30 23:12:13.085</td>\n",
       "      <td>3147.476781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>2017-03-30 23:16:09.573</td>\n",
       "      <td>3146.895737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>2017-03-30 23:26:54.436</td>\n",
       "      <td>3146.294518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>2017-03-30 23:41:34.347</td>\n",
       "      <td>3145.723545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>2017-03-30 23:55:35.408</td>\n",
       "      <td>3145.128000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>167 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  created_at  order_amount\n",
       "4833 2017-03-30 00:22:19.920   3237.896359\n",
       "4834 2017-03-30 00:36:01.921   3237.321613\n",
       "4835 2017-03-30 00:42:12.094   3236.705955\n",
       "4836 2017-03-30 00:54:43.962   3236.095514\n",
       "4837 2017-03-30 00:57:20.356   3235.458247\n",
       "...                      ...           ...\n",
       "4995 2017-03-30 23:12:13.085   3147.476781\n",
       "4996 2017-03-30 23:16:09.573   3146.895737\n",
       "4997 2017-03-30 23:26:54.436   3146.294518\n",
       "4998 2017-03-30 23:41:34.347   3145.723545\n",
       "4999 2017-03-30 23:55:35.408   3145.128000\n",
       "\n",
       "[167 rows x 2 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aov_df[aov_df.created_at>start_date_for_AOV]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualising the Data\n",
    "Plotting histogram and a boxplot to check for outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121c03bb0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.order_amount.hist(bins=50,range=[0, 20000], facecolor='gray', align='mid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121c922e0>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=df['order_amount'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking For Outliers \n",
    "We check for all the order amounts which have an \"Order amount < 2500\" and otherwise. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4937, 7), 158.48031496062993)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for values with order amount less than 2500\n",
    "df[df['order_amount']<2500].shape, df[df['order_amount']<250].order_amount.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((63, 7), 5189.894878706199)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for values with order amount greater than 2500\n",
    "df[df['order_amount']>2500].shape, df[df['order_amount']>250].order_amount.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus we see, 4937 orders with Average Order Value of 302.5 and 63 orders with a high AOV of 225901.5. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "window must be an integer",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-45-35ef80c42050>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maov_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'order_amount'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0;36m2500\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'30D'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morder_amount\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mrolling\u001b[0;34m(self, window, min_periods, center, win_type, on, axis, closed)\u001b[0m\n\u001b[1;32m  10374\u001b[0m                 )\n\u001b[1;32m  10375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m> 10376\u001b[0;31m             return Rolling(\n\u001b[0m\u001b[1;32m  10377\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10378\u001b[0m                 \u001b[0mwindow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwindow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/window/rolling.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, window, min_periods, center, win_type, axis, on, closed, **kwargs)\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwin_freq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     95\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_numba_func_cache\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mDict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCallable\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pandas/core/window/rolling.py\u001b[0m in \u001b[0;36mvalidate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1860\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1861\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwindow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1862\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"window must be an integer\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1863\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwindow\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1864\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"window must be non-negative\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: window must be an integer"
     ]
    }
   ],
   "source": [
    "aov_df = df[df['order_amount']<2500].rolling('30D').order_amount.mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>order_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4833</th>\n",
       "      <td>2017-03-30 00:22:19.920</td>\n",
       "      <td>3237.896359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4834</th>\n",
       "      <td>2017-03-30 00:36:01.921</td>\n",
       "      <td>3237.321613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4835</th>\n",
       "      <td>2017-03-30 00:42:12.094</td>\n",
       "      <td>3236.705955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4836</th>\n",
       "      <td>2017-03-30 00:54:43.962</td>\n",
       "      <td>3236.095514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4837</th>\n",
       "      <td>2017-03-30 00:57:20.356</td>\n",
       "      <td>3235.458247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>2017-03-30 23:12:13.085</td>\n",
       "      <td>3147.476781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>2017-03-30 23:16:09.573</td>\n",
       "      <td>3146.895737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>2017-03-30 23:26:54.436</td>\n",
       "      <td>3146.294518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>2017-03-30 23:41:34.347</td>\n",
       "      <td>3145.723545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>2017-03-30 23:55:35.408</td>\n",
       "      <td>3145.128000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>167 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  created_at  order_amount\n",
       "4833 2017-03-30 00:22:19.920   3237.896359\n",
       "4834 2017-03-30 00:36:01.921   3237.321613\n",
       "4835 2017-03-30 00:42:12.094   3236.705955\n",
       "4836 2017-03-30 00:54:43.962   3236.095514\n",
       "4837 2017-03-30 00:57:20.356   3235.458247\n",
       "...                      ...           ...\n",
       "4995 2017-03-30 23:12:13.085   3147.476781\n",
       "4996 2017-03-30 23:16:09.573   3146.895737\n",
       "4997 2017-03-30 23:26:54.436   3146.294518\n",
       "4998 2017-03-30 23:41:34.347   3145.723545\n",
       "4999 2017-03-30 23:55:35.408   3145.128000\n",
       "\n",
       "[167 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aov_df[aov_df.created_at>start_date_for_AOV]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we calculate AOV without the outliers and get the desired results:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part b) & c) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First Approach: We can remove the outliers and then calculate the AOV for the dataset. We can introduce a column called \"outlier\" and one-hot encode it. Following, we can delete the outliers and check for the AOV by calculating the mean. Alternatively, we can use a metric \"Revenue per item\" and can be calculated by. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>created_at</th>\n",
       "      <th>outlier</th>\n",
       "      <th>RPI</th>\n",
       "      <th>RPI1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>746</td>\n",
       "      <td>224</td>\n",
       "      <td>2</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-13 12:36:56.190</td>\n",
       "      <td>0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>112.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>92</td>\n",
       "      <td>925</td>\n",
       "      <td>90</td>\n",
       "      <td>1</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-03 17:38:51.999</td>\n",
       "      <td>0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>861</td>\n",
       "      <td>144</td>\n",
       "      <td>1</td>\n",
       "      <td>cash</td>\n",
       "      <td>2017-03-14 04:23:55.595</td>\n",
       "      <td>0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "      <td>935</td>\n",
       "      <td>156</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>2017-03-26 12:43:36.649</td>\n",
       "      <td>0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>156.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>883</td>\n",
       "      <td>156</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>2017-03-01 04:35:10.773</td>\n",
       "      <td>0</td>\n",
       "      <td>156.0</td>\n",
       "      <td>156.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  shop_id  user_id  order_amount  total_items payment_method  \\\n",
       "0         1       53      746           224            2           cash   \n",
       "1         2       92      925            90            1           cash   \n",
       "2         3       44      861           144            1           cash   \n",
       "3         4       18      935           156            1    credit_card   \n",
       "4         5       18      883           156            1    credit_card   \n",
       "\n",
       "               created_at  outlier    RPI   RPI1  \n",
       "0 2017-03-13 12:36:56.190        0  112.0  112.0  \n",
       "1 2017-03-03 17:38:51.999        0   90.0   90.0  \n",
       "2 2017-03-14 04:23:55.595        0  144.0  144.0  \n",
       "3 2017-03-26 12:43:36.649        0  156.0  156.0  \n",
       "4 2017-03-01 04:35:10.773        0  156.0  156.0  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np \n",
    "# A outlier is considered as 1 if it exceeds the order amount of 2500, otherwise 0. \n",
    "df['outlier'] = np.where(df.order_amount > 2500, 1, 0) \n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4937, 10)\n"
     ]
    }
   ],
   "source": [
    "# Creating a dataframe removing all the outliers\n",
    "df2 = df.loc[df['outlier'] == 0]\n",
    "print(df2.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "302.58051448247926"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculating mean\n",
    "df2['order_amount'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_amount</th>\n",
       "      <th>total_items</th>\n",
       "      <th>outlier</th>\n",
       "      <th>RPI</th>\n",
       "      <th>RPI1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.0</td>\n",
       "      <td>4937.000000</td>\n",
       "      <td>4937.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2499.551347</td>\n",
       "      <td>49.846465</td>\n",
       "      <td>849.752279</td>\n",
       "      <td>302.580514</td>\n",
       "      <td>1.994734</td>\n",
       "      <td>0.0</td>\n",
       "      <td>151.788536</td>\n",
       "      <td>151.788536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1444.069407</td>\n",
       "      <td>29.061131</td>\n",
       "      <td>86.840313</td>\n",
       "      <td>160.804912</td>\n",
       "      <td>0.982821</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.034215</td>\n",
       "      <td>29.034215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>90.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1248.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>775.000000</td>\n",
       "      <td>163.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2497.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>850.000000</td>\n",
       "      <td>284.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>153.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3751.000000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>925.000000</td>\n",
       "      <td>387.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>166.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5000.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1760.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>352.000000</td>\n",
       "      <td>352.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          order_id      shop_id      user_id  order_amount  total_items  \\\n",
       "count  4937.000000  4937.000000  4937.000000   4937.000000  4937.000000   \n",
       "mean   2499.551347    49.846465   849.752279    302.580514     1.994734   \n",
       "std    1444.069407    29.061131    86.840313    160.804912     0.982821   \n",
       "min       1.000000     1.000000   700.000000     90.000000     1.000000   \n",
       "25%    1248.000000    24.000000   775.000000    163.000000     1.000000   \n",
       "50%    2497.000000    50.000000   850.000000    284.000000     2.000000   \n",
       "75%    3751.000000    74.000000   925.000000    387.000000     3.000000   \n",
       "max    5000.000000   100.000000   999.000000   1760.000000     8.000000   \n",
       "\n",
       "       outlier          RPI         RPI1  \n",
       "count   4937.0  4937.000000  4937.000000  \n",
       "mean       0.0   151.788536   151.788536  \n",
       "std        0.0    29.034215    29.034215  \n",
       "min        0.0    90.000000    90.000000  \n",
       "25%        0.0   132.000000   132.000000  \n",
       "50%        0.0   153.000000   153.000000  \n",
       "75%        0.0   166.000000   166.000000  \n",
       "max        0.0   352.000000   352.000000  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculating the Summary Statistics \n",
    "df2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "387.7428"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating Revenue per Item: \n",
    "\n",
    "df['RPI'] = df['order_amount'] / df['total_items']\n",
    "df.head()\n",
    "\n",
    "#Calculating mean\n",
    "\n",
    "df['RPI'].mean()\n",
    "\n",
    "# we can also calculate RPI by removing outliers or filtering for different price ranges of shoes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Thus after removing the outliers, the AOV looks reasonable at around 302.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Approach 2: Instead of taking the mean, take another descriptive Statistic : Median. Median has little effect on the presence of outliers. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "284.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculating the median\n",
    "df.order_amount.median()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QUESTION 2 : USING SQL"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Ques 1) How many orders were shipped by Speedy Express in total? \n",
    "\n",
    "# Code:\n",
    "\n",
    "select count(*) from \n",
    "(select * from Orders o join shippers s on o.ShipperID = s.ShipperID) \n",
    "where ShipperName = 'Speedy Express'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Answer -> 54"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Ques 2) How many orders were shipped by Speedy Express in total?\n",
    "\n",
    "# Code: \n",
    "\n",
    "select LastName from Employees \n",
    "where EmployeeID in \n",
    "(select EmployeeID from (SELECT EmployeeID, \n",
    "count(OrderID) as orders FROM [Orders] group by \n",
    "EmployeeID) order by orders DESC limit 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Answer -> Peacock"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Ques 3) What product was ordered the most by customers in Germany?\n",
    "\n",
    "#Code: \n",
    "select ProductName from \n",
    "(SELECT ProductID,sum(Quantity) as \n",
    "product_quantity FROM Orders o Join \n",
    "(select CustomerID,Country from Customers) cs \n",
    "on o.CustomerID=cs.CustomerID Join \n",
    "OrderDetails od on \n",
    "o.OrderID = od.OrderID \n",
    "where Country = 'Germany' \n",
    "group by Quantity order by product_quantity DESC \n",
    "limit 1) od \n",
    "join \n",
    "(select ProductName,ProductID from Products) \n",
    "pd_details on \n",
    "od.ProductID = pd_details.ProductID\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Answer -> Boston Crab Meat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
